// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IoC.cs" company="Web Advanced">
// Copyright 2012 Web Advanced (www.webadvanced.com)
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace SocialPlus.Server.WebRoleCommon.DependencyResolution
{
    using System;

    using SocialPlus.Server.WebRoleCommon.Versioning;
    using StructureMap;

    /// <summary>
    /// Inversion of Control class
    /// </summary>
    public static class IoC<T> where T : BaseRegistry
    {
        /// <summary>
        /// static instance of IoC container
        /// </summary>
        private static IContainer instance;

        /// <summary>
        /// object used for locking
        /// </summary>
        private static object syncRoot = new object();

        /// <summary>
        /// Gets and sets info of service version
        /// </summary>
        public static ServiceVersionInfo ServiceVersionInfo { get; set; }

        /// <summary>
        /// Get container
        /// </summary>
        /// <returns>Container interface</returns>
        public static IContainer Instance
        {
            get
            {
                // Create an instance if one does not exist
                if (instance == null)
                {
                    lock (syncRoot)
                    {
                        //  Make sure only one instance is created
                        if (instance == null)
                        {
                            // Create a registry instance by passing in the service version info to the constructor
                            BaseRegistry registry = Activator.CreateInstance(typeof(T), new[] { ServiceVersionInfo }) as BaseRegistry;
                            instance = new Container(registry);
                        }
                    }
                }

                return instance;
            }
        }
    }
}