// <copyright file="TwitterAuthHeader.cs" company="Microsoft">
// Copyright (c) Microsoft. All rights reserved.
// </copyright>

namespace SocialPlus.OAuth
{
    using System;
    using System.Reflection;

    /// <summary>
    /// <c>OAuth</c> requests to Twitter must include a proprietary authorization header. This class implements the construction of this header.
    /// Note that the order of the properties of this class is important. Twitter expects a certain ordering
    /// of input parameters when requests are made. Changing this ordering ends up in Unauthorized requests
    /// very difficult to debug.
    /// </summary>
    public class TwitterAuthHeader
    {
        /// <summary>
        /// Gets or sets the key used to sign parts of the authorization header
        /// </summary>
        public string SigningKey { get; set; }

        /// <summary>
        /// Gets or sets the URL-encoded version of the URL you wish your user to be redirected to when they complete step 2.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_callback", Signed = true)]
        public string OauthCallback { get; set; }

        /// <summary>
        /// Gets or sets the <code>oauth_consumer_key</code> identifies which application is making the request.
        /// Obtain this value from checking the settings page for your application on <c>dev.twitter.com/apps</c>.
        /// This corresponds to clientId or appId for other identity providers
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_consumer_key", Signed = true)]
        public string OauthConsumerKey { get; set; }

        /// <summary>
        /// Gets or sets the nonce parameter is a unique token your application should generate for each unique request.
        /// Twitter will use this value to determine whether a request has been submitted multiple times.
        /// The value for this request was generated by base64 encoding 32 bytes of random data, and stripping out
        /// all non-word characters, but any approach which produces a relatively random alphanumeric string should be OK here.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_nonce", Signed = true)]
        public string OauthNonce { get; set; }

        /// <summary>
        /// Gets or sets the  <code>oauth_signature_method</code> used by Twitter is HMAC-SHA1.
        /// This value should be used for any authorized request sent to Twitter’s API.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_signature_method", Signed = true)]
        public string OauthSignatureMethod { get; set; }

        /// <summary>
        /// Gets or sets the <code>oauth_timestamp</code> parameter that indicates when the request was created.
        /// This value should be the number of seconds since the Unix epoch at the point the request is generated,
        /// and should be easily generated in most programming languages. Twitter will reject requests
        /// which were created too far in the past, so it is important to keep the clock of the computer
        /// generating requests in sync with NTP.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_timestamp", Signed = true)]
        public string OauthTimestamp { get; set; }

        /// <summary>
        /// Gets or sets the <code>oauth_token parameter</code> typically represents a user’s permission to share access to
        /// their account with your application. There are a few authentication requests where this value is not passed
        /// or is a different form of token, but those are covered in detail in Obtaining access tokens.
        /// For most general-purpose requests, you will use what is referred to as an access token.
        /// You can generate a valid access token for your account on the settings page for your application
        /// at <c>dev.twitter.com/apps</c>.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_token", Signed = true)]
        public string OauthToken { get; set; }

        /// <summary>
        /// Gets or sets the verifier returned by Step 2 in Twitter <c>OAuth</c>.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_verifier", Signed = true)]
        public string OauthVerifier { get; set; }

        /// <summary>
        /// Gets or sets the <code>oauth_version</code> parameter which should always be 1.0 for any request sent to the Twitter API.
        /// </summary>
        [TwitterAuthHeaderAttribute(Name = "oauth_version", Signed = true)]
        public string OauthVersion { get; set; }

        /// <summary>
        /// Creates the proper authorization header for Twitter.
        /// </summary>
        /// <param name="url">url for request to Twitter</param>
        /// <param name="method">string representing the HTTP method (GET versus POST)</param>
        /// <returns>the properly formatted authorization header</returns>
        public string AuthHeader(string url, string method)
        {
            // Sign the request
            string authHeader = "OAuth oauth_signature=\"" + Uri.EscapeDataString(this.SignedHTTPRequest(url, method)) + "\"";

            foreach (PropertyInfo prop in this.GetType().GetProperties())
            {
                object[] attributes = prop.GetCustomAttributes(typeof(TwitterAuthHeaderAttribute), true);
                if (attributes.Length > 0)
                {
                    string propVal = (string)prop.GetValue(this);
                    if (!string.IsNullOrEmpty(propVal))
                    {
                        string propName = ((TwitterAuthHeaderAttribute)attributes[0]).Name;
                        authHeader += ", " + propName + "=\"" + propVal + "\"";
                    }
                }
            }

            return authHeader;
        }

        /// <summary>
        /// Constructs the signed request syntax according to Twitter's spec.
        /// </summary>
        /// <param name="url">url for request to Twitter</param>
        /// <param name="method">string representing the HTTP method (GET versus POST)</param>
        /// <returns>the properly formatted HTTP request string.</returns>
        private string SignedHTTPRequest(string url, string method)
        {
            string requestString = string.Empty;

            foreach (PropertyInfo prop in this.GetType().GetProperties())
            {
                object[] attributes = prop.GetCustomAttributes(typeof(TwitterAuthHeaderAttribute), true);
                if (attributes.Length > 0)
                {
                    string propVal = (string)prop.GetValue(this);
                    if (!string.IsNullOrEmpty(propVal))
                    {
                        string propName = ((TwitterAuthHeaderAttribute)attributes[0]).Name;
                        requestString += '&' + propName + "=" + propVal;
                    }
                }
            }

            // The two '&' chars after POST and the TokenURL must stay unescaped, but the rest must be escaped.
            requestString = method + "&" + Uri.EscapeDataString(url) + "&" + Uri.EscapeDataString(requestString.Substring(1));
            return OAuthUtil.Base64HMACString(requestString, this.SigningKey);
        }
    }
}