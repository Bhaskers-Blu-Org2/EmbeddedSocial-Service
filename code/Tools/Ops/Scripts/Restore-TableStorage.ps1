#
# Restore-TableStorage.ps1
#
# This script uses AzCopy to upload all the tables from the blob container in Azure storage account of specified source environment into an Azure storage account of specified target environment.
# It uses the manifest file generated by AzCopy for each table that was previously backed up.  
# You cannot upload a table without the corresponding manifest file.
# This script requires AzCopy v4.0 or higher installed in C:\Program Files (x86)\Microsoft SDKs\azure\AzCopy\AzCopy.exe (older versions of AzCopy cannot copy tables)
# This script requires Azure PowerShell version 2.1 or higher with Azure subscription loaded.
#
# Example Usage
# Restore-TableStorage -Source "sp-dev-test1" -SourceBlobContainerName "spapitablestorebackup20160824235605" -Destination "sp-dev-test1"
#

function Restore-TableStorage
{
	<#
    .NOTES
       Name: Restore-TableStorage.ps1
       Requires: AzCopy v4.0 or higher installed in C:\Program Files (x86)\Microsoft SDKs\azure\AzCopy\AzCopy.exe. Azure PowerShell version 2.1 or higher with Azure subscription loaded.
    .SYNOPSIS
       Upload all the tables from the blob container in Azure storage account of specified source environment into an Azure storage account of specified target environment
    .DESCRIPTION
       This script uses AzCopy to upload all the tables from the blob container in Azure storage account of specified source environment into an Azure storage account of specified target environment.
	   It uses the manifest file generated by AzCopy for each table that was previously backed up. You cannot upload a table without the corresponding manifest file. 	   
    .PARAMETER Source
       Name of the Source Environment.    
    .PARAMETER SourceBlobContainerName
	   Container name in Source Azure Storage Account that contains the Table storage backup.
	.PARAMETER Destination
	   Name of the Destination Environment. When not specified, the value is same as Source Environment.
    #>
	
	param(
		[parameter(Mandatory=$true, HelpMessage='Name of the Source Environment.')]
		[Alias("Source")]
		[string]$SourceEnvironmentName,
		[parameter(Mandatory=$true, HelpMessage='Container name in Source Azure Storage Account that contains the Table storage backup.')]
		[string]$SourceBlobContainerName,
		[parameter(Mandatory=$false, HelpMessage='Name of the Destination Environment. When not specified, the value is same as Source Environment.')]
		[Alias("Destination")]
		[string]$DestinationEnvironmentName	
	)

	process
    {
	
		$ErrorActionPreference = "Stop"

		if (-not (Test-Path "${env:ProgramFiles(x86)}\Microsoft SDKs\Azure\AzCopy\AzCopy.exe"))
		{
			throw "Azcopy is not installed - get it from here: https://azure.microsoft.com/en-gb/documentation/articles/storage-use-azcopy/"
		}

		if (!($DestinationEnvironmentName)) 
		{
			Write-host "Destination environment is not specified. Setting destination environment same as source." -ForegroundColor Yellow
			$DestinationEnvironmentName = $SourceEnvironmentName
		}

		$sourceResourceGroup = $SourceEnvironmentName
		$sourceStorageAccountName = $SourceEnvironmentName.Replace("-","")
		$sourceStorageAccountContext = (Get-AzureRmStorageAccount -ResourceGroupName $sourceResourceGroup -Name $sourceStorageAccountName).Context
		# Breaking change in latest Azure Powershell version where Key1 is replaced with Value[0]
		$sourceStorageAccountKey = (Get-AzureRmStorageAccountKey -ResourceGroupName $sourceResourceGroup -Name $sourceStorageAccountName).Value[0]

		$destinationResourceGroup = $DestinationEnvironmentName
		$destinationStorageAccountName = $DestinationEnvironmentName.Replace("-","")
		# Breaking change in latest Azure Powershell version where Key1 is replaced with Value[0]
		$destinationStorageAccountKey = (Get-AzureRmStorageAccountKey -ResourceGroupName $destinationResourceGroup -Name $destinationStorageAccountName).Value[0]

		$arrayProdStorageAccounts = "spapi", "spmobisys", "spppe", "spprodbeihai", "spppebeihai", "spdevbeihai"
		if($arrayProdStorageAccounts -contains $destinationStorageAccountName)
		{
			$confirmation = Read-Host "The account $destinationStorageAccountName is a production storage account. Are you sure you want to proceed? [y/n]"
			if ($confirmation -ne 'y') 
			{
				exit;
			}
		}

		$azcopy = ${env:programfiles(x86)} + "\Microsoft SDKs\azure\AzCopy\AzCopy.exe"
		$sourceBlobContainer = "https://$sourceStorageAccountName.blob.core.windows.net/" + $SourceBlobContainerName

		Get-AzureStorageBlob -Context $sourceStorageAccountContext -Container $SourceBlobContainerName | Select Name | % `
		{ 
			foreach ($property in $_.PSObject.Properties) 
			{ 
				$manifestName = $($_.PSObject.properties[$property.Name].Value)
				if($manifestName.EndsWith('.manifest'))
				{
					$tableName = $manifestName.Split('_')[1]
					$destTable = "https://$destinationStorageAccountName.table.core.windows.net/$tableName"
				
					Write-host "Moving $tableName at $destTable"
					& $azcopy /Source:$sourceBlobContainer /SourceKey:$sourceStorageAccountKey /Dest:$destTable /DestKey:$destinationStorageAccountKey /Manifest:$manifestName /EntityOperation:InsertOrReplace
				}
			}
		}		
	}
}





